package edu.ucsb.cs156.example.controllers;

import edu.ucsb.cs156.example.repositories.RecommendationRequestRepository;
import edu.ucsb.cs156.example.repositories.UserRepository;
import edu.ucsb.cs156.example.ControllerTestCase;
import edu.ucsb.cs156.example.entities.RecommendationRequest;
import edu.ucsb.cs156.example.testconfig.TestConfig;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MvcResult;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;

@WebMvcTest(controllers = RecommendationRequestController.class)
@Import(TestConfig.class)
public class RecommendationRequestControllerTests extends ControllerTestCase {

    @MockBean
    RecommendationRequestRepository recommendationRequestRepository;

    @MockBean
    UserRepository userRepository;

    // GET
    @Test
    public void logged_out_users_cannot_get_all() throws Exception {
        mockMvc.perform(get("/api/recommendationrequest/all"))
                .andExpect(status().is(403)); // logged out users cannot access
    }

    @WithMockUser(roles = { "USER" })
    @Test
    public void logged_in_users_can_get_all() throws Exception {
        mockMvc.perform(get("/api/recommendationrequest/all"))
                .andExpect(status().isOk()); // logged-in users can access
    }

    @WithMockUser(roles = { "USER" })
    @Test
    public void logged_in_user_can_get_all_recommendation_requests() throws Exception {
        // Arrange data
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2022-03-11T00:00:00");

        RecommendationRequest request1 = RecommendationRequest.builder()
                .requesterEmail("example1")
                .professorEmail("example2")
                .explanation("testing")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(true)
                .build();

        RecommendationRequest request2 = RecommendationRequest.builder()
                .requesterEmail("example3")
                .professorEmail("example4")
                .explanation("testing again")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(false)
                .build();

        ArrayList<RecommendationRequest> expectedRequests = new ArrayList<>(Arrays.asList(request1, request2));

        when(recommendationRequestRepository.findAll()).thenReturn(expectedRequests);

        // Act
        MvcResult response = mockMvc.perform(get("/api/recommendationrequest/all"))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).findAll();
        String expectedJson = mapper.writeValueAsString(expectedRequests);
        String responseString = response.getResponse().getContentAsString();
        assertEquals(expectedJson, responseString);
    }

    @Test
    public void logged_out_users_cannot_get_by_id() throws Exception {
        mockMvc.perform(get("/api/recommendationrequest?id=7"))
                .andExpect(status().is(403)); // logged out users cannot access
    }

    @WithMockUser(roles = { "USER" })
    @Test
    public void logged_in_user_can_get_by_id_when_the_id_exists() throws Exception {
        // Arrange
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2022-01-03T00:00:00");

        RecommendationRequest request = RecommendationRequest.builder()
                .requesterEmail("example1")
                .professorEmail("example2")
                .explanation("test explanation")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(true)
                .build();

        when(recommendationRequestRepository.findById(eq(7L))).thenReturn(Optional.of(request));

        // Act
        MvcResult response = mockMvc.perform(get("/api/recommendationrequest?id=7"))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).findById(eq(7L));
        String expectedJson = mapper.writeValueAsString(request);
        String responseString = response.getResponse().getContentAsString();
        assertEquals(expectedJson, responseString);
    }

    @WithMockUser(roles = { "USER" })
    @Test
    public void logged_in_user_gets_404_when_request_does_not_exist() throws Exception {
        when(recommendationRequestRepository.findById(eq(7L))).thenReturn(Optional.empty());

        MvcResult response = mockMvc.perform(get("/api/recommendationrequest?id=7"))
                .andExpect(status().isNotFound())
                .andReturn();

        verify(recommendationRequestRepository, times(1)).findById(eq(7L));
        Map<String, Object> json = responseToJson(response);
        assertEquals("EntityNotFoundException", json.get("type"));
        assertEquals("RecommendationRequest with id 7 not found", json.get("message"));
    }

    // POST
    @Test
    public void logged_out_users_cannot_post() throws Exception {
        mockMvc.perform(post("/api/recommendationrequest/post"))
                .andExpect(status().is(403)); // only logged-in users can post
    }

    @WithMockUser(roles = { "USER" })
    @Test
    public void regular_users_cannot_post() throws Exception {
        mockMvc.perform(post("/api/recommendationrequest/post"))
                .andExpect(status().is(403)); // only admins can post
    }

    @WithMockUser(roles = { "ADMIN", "USER" })
    @Test
    public void admin_can_post_new_recommendation_request() throws Exception {
        // Arrange
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2022-01-03T00:00:00");

        RecommendationRequest request = RecommendationRequest.builder()
                .requesterEmail("example1")
                .professorEmail("example2")
                .explanation("test explanation")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(true)
                .build();

        when(recommendationRequestRepository.save(eq(request))).thenReturn(request);

        // Act
        MvcResult response = mockMvc.perform(
                        post("/api/recommendationrequest/post?requesterEmail=example1&professorEmail=example2&explanation=test&dateRequested=2022-01-03T00:00:00&dateNeeded=2022-01-03T00:00:00&done=true")
                                .with(csrf()))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).save(request);
        String expectedJson = mapper.writeValueAsString(request);
        String responseString = response.getResponse().getContentAsString();
        assertEquals(expectedJson, responseString);
    }

    // PUT (Edit)
    @WithMockUser(roles = { "ADMIN", "USER" })
    @Test
    public void admin_can_edit_an_existing_recommendationrequest() throws Exception {
        // Arrange
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2023-01-03T00:00:00");
        LocalDateTime newDateRequested = LocalDateTime.parse("2022-02-03T00:00:00");

        RecommendationRequest existingRequest = RecommendationRequest.builder()
                .requesterEmail("example1")
                .professorEmail("example2")
                .explanation("original explanation")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(true)
                .build();

        RecommendationRequest editedRequest = RecommendationRequest.builder()
                .requesterEmail("updatedEmail")
                .professorEmail("updatedProf")
                .explanation("updated explanation")
                .dateRequested(newDateRequested)
                .dateNeeded(dateNeeded)
                .done(false)
                .build();

        String requestBody = mapper.writeValueAsString(editedRequest);

        when(recommendationRequestRepository.findById(eq(67L))).thenReturn(Optional.of(existingRequest));

        // Act
        MvcResult response = mockMvc.perform(
                        put("/api/recommendationrequest?id=67")
                                .contentType(MediaType.APPLICATION_JSON)
                                .characterEncoding("utf-8")
                                .content(requestBody)
                                .with(csrf()))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).findById(67L);
        verify(recommendationRequestRepository, times(1)).save(editedRequest);
        String responseString = response.getResponse().getContentAsString();
        assertEquals(requestBody, responseString);
    }

    @WithMockUser(roles = { "ADMIN", "USER" })
    @Test
    public void admin_cannot_edit_non_existent_request() throws Exception {
        // Arrange
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2022-01-03T00:00:00");

        RecommendationRequest editedRequest = RecommendationRequest.builder()
                .requesterEmail("updatedEmail")
                .professorEmail("updatedProf")
                .explanation("updated explanation")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(false)
                .build();

        String requestBody = mapper.writeValueAsString(editedRequest);

        when(recommendationRequestRepository.findById(eq(67L))).thenReturn(Optional.empty());

        // Act
        MvcResult response = mockMvc.perform(
                        put("/api/recommendationrequest?id=67")
                                .contentType(MediaType.APPLICATION_JSON)
                                .characterEncoding("utf-8")
                                .content(requestBody)
                                .with(csrf()))
                .andExpect(status().isNotFound())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).findById(67L);
        Map<String, Object> json = responseToJson(response);
        assertEquals("RecommendationRequest with id 67 not found", json.get("message"));
    }

    // DELETE
    @WithMockUser(roles = { "ADMIN", "USER" })
    @Test
    public void admin_can_delete_a_request() throws Exception {
        // Arrange
        LocalDateTime dateRequested = LocalDateTime.parse("2022-01-03T00:00:00");
        LocalDateTime dateNeeded = LocalDateTime.parse("2022-01-03T00:00:00");

        RecommendationRequest requestToDelete = RecommendationRequest.builder()
                .requesterEmail("example1change")
                .professorEmail("example2change")
                .explanation("testing delete")
                .dateRequested(dateRequested)
                .dateNeeded(dateNeeded)
                .done(false)
                .build();

        when(recommendationRequestRepository.findById(eq(15L))).thenReturn(Optional.of(requestToDelete));

        // Act
        MvcResult response = mockMvc.perform(
                        delete("/api/recommendationrequest?id=15")
                                .with(csrf()))
                .andExpect(status().isOk())
                .andReturn();

        // Assert
        verify(recommendationRequestRepository, times(1)).findById(15L);
        verify(recommendationRequestRepository, times(1)).delete(any());

        Map<String, Object> json = responseToJson(response);
        assertEquals("Recommendation Request with id 15 deleted", json.get("message"));
    }

    @WithMockUser(roles = { "ADMIN", "USER" })
    @Test
    public void admin_tries_to_delete_non_existent_request_and_gets_right_error_message() throws Exception {
        when(recommendationRequestRepository.findById(eq(15L))).thenReturn(Optional.empty());

        MvcResult response = mockMvc.perform(
                        delete("/api/recommendationrequest?id=15")
                                .with(csrf()))
                .andExpect(status().isNotFound())
                .andReturn();

        verify(recommendationRequestRepository, times(1)).findById(15L);
        Map<String, Object> json = responseToJson(response);
        assertEquals("RecommendationRequest with id 15 not found", json.get("message"));
    }
}
